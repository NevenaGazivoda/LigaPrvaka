//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace LigaPrvaka.ModelEF
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class LigaprvakaEntities : DbContext
    {
        public LigaprvakaEntities()
            : base("name=LigaprvakaEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Igraci> Igracis { get; set; }
        public virtual DbSet<Statistika> Statistikas { get; set; }
        public virtual DbSet<sysdiagram> sysdiagrams { get; set; }
        public virtual DbSet<Timovi> Timovis { get; set; }
        public virtual DbSet<Utakmouse> Utakmice { get; set; }
    
        public virtual int deleteFromIgraci(Nullable<int> idIgraca)
        {
            var idIgracaParameter = idIgraca.HasValue ?
                new ObjectParameter("IdIgraca", idIgraca) :
                new ObjectParameter("IdIgraca", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("deleteFromIgraci", idIgracaParameter);
        }
    
        public virtual int deleteFromStatistika(Nullable<int> igracId, Nullable<int> utakmicaId)
        {
            var igracIdParameter = igracId.HasValue ?
                new ObjectParameter("IgracId", igracId) :
                new ObjectParameter("IgracId", typeof(int));
    
            var utakmicaIdParameter = utakmicaId.HasValue ?
                new ObjectParameter("UtakmicaId", utakmicaId) :
                new ObjectParameter("UtakmicaId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("deleteFromStatistika", igracIdParameter, utakmicaIdParameter);
        }
    
        public virtual int deleteFromTimovi(Nullable<int> idTima)
        {
            var idTimaParameter = idTima.HasValue ?
                new ObjectParameter("IdTima", idTima) :
                new ObjectParameter("IdTima", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("deleteFromTimovi", idTimaParameter);
        }
    
        public virtual int deleteFromUtakmice(Nullable<int> idUtakmice)
        {
            var idUtakmiceParameter = idUtakmice.HasValue ?
                new ObjectParameter("IdUtakmice", idUtakmice) :
                new ObjectParameter("IdUtakmice", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("deleteFromUtakmice", idUtakmiceParameter);
        }
    
        public virtual ObjectResult<getAllFromIgraci_Result> getAllFromIgraci()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getAllFromIgraci_Result>("getAllFromIgraci");
        }
    
        public virtual ObjectResult<getAllFromStatistika_Result> getAllFromStatistika()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getAllFromStatistika_Result>("getAllFromStatistika");
        }
    
        public virtual ObjectResult<getAllFromTimovi_Result> getAllFromTimovi()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getAllFromTimovi_Result>("getAllFromTimovi");
        }
    
        public virtual ObjectResult<getAllFromUtakmice_Result> getAllFromUtakmice()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getAllFromUtakmice_Result>("getAllFromUtakmice");
        }
    
        public virtual ObjectResult<getIgracById_Result> getIgracById(Nullable<int> igracId)
        {
            var igracIdParameter = igracId.HasValue ?
                new ObjectParameter("IgracId", igracId) :
                new ObjectParameter("IgracId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getIgracById_Result>("getIgracById", igracIdParameter);
        }
    
        public virtual ObjectResult<getStatistikaById_Result> getStatistikaById(Nullable<int> igracId, Nullable<int> utakmicaId)
        {
            var igracIdParameter = igracId.HasValue ?
                new ObjectParameter("IgracId", igracId) :
                new ObjectParameter("IgracId", typeof(int));
    
            var utakmicaIdParameter = utakmicaId.HasValue ?
                new ObjectParameter("UtakmicaId", utakmicaId) :
                new ObjectParameter("UtakmicaId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getStatistikaById_Result>("getStatistikaById", igracIdParameter, utakmicaIdParameter);
        }
    
        public virtual ObjectResult<getTimById_Result> getTimById(Nullable<int> timId)
        {
            var timIdParameter = timId.HasValue ?
                new ObjectParameter("TimId", timId) :
                new ObjectParameter("TimId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getTimById_Result>("getTimById", timIdParameter);
        }
    
        public virtual ObjectResult<getUtakmicaById_Result> getUtakmicaById(Nullable<int> utakmicaId)
        {
            var utakmicaIdParameter = utakmicaId.HasValue ?
                new ObjectParameter("UtakmicaId", utakmicaId) :
                new ObjectParameter("UtakmicaId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getUtakmicaById_Result>("getUtakmicaById", utakmicaIdParameter);
        }
    
        public virtual int insertIntoIgraci(string ime, Nullable<int> idTima)
        {
            var imeParameter = ime != null ?
                new ObjectParameter("Ime", ime) :
                new ObjectParameter("Ime", typeof(string));
    
            var idTimaParameter = idTima.HasValue ?
                new ObjectParameter("IdTima", idTima) :
                new ObjectParameter("IdTima", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("insertIntoIgraci", imeParameter, idTimaParameter);
        }
    
        public virtual int insertIntoStatistika(Nullable<int> igracId, Nullable<int> utakmicaId, Nullable<int> golovi)
        {
            var igracIdParameter = igracId.HasValue ?
                new ObjectParameter("IgracId", igracId) :
                new ObjectParameter("IgracId", typeof(int));
    
            var utakmicaIdParameter = utakmicaId.HasValue ?
                new ObjectParameter("UtakmicaId", utakmicaId) :
                new ObjectParameter("UtakmicaId", typeof(int));
    
            var goloviParameter = golovi.HasValue ?
                new ObjectParameter("Golovi", golovi) :
                new ObjectParameter("Golovi", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("insertIntoStatistika", igracIdParameter, utakmicaIdParameter, goloviParameter);
        }
    
        public virtual int insertIntoTimovi(string naziv, Nullable<int> broj)
        {
            var nazivParameter = naziv != null ?
                new ObjectParameter("Naziv", naziv) :
                new ObjectParameter("Naziv", typeof(string));
    
            var brojParameter = broj.HasValue ?
                new ObjectParameter("Broj", broj) :
                new ObjectParameter("Broj", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("insertIntoTimovi", nazivParameter, brojParameter);
        }
    
        public virtual int insertIntoUtakmice(Nullable<int> idDomaci, Nullable<int> idGosti, Nullable<int> golovi_domaci, Nullable<int> golovi_gosti)
        {
            var idDomaciParameter = idDomaci.HasValue ?
                new ObjectParameter("IdDomaci", idDomaci) :
                new ObjectParameter("IdDomaci", typeof(int));
    
            var idGostiParameter = idGosti.HasValue ?
                new ObjectParameter("IdGosti", idGosti) :
                new ObjectParameter("IdGosti", typeof(int));
    
            var golovi_domaciParameter = golovi_domaci.HasValue ?
                new ObjectParameter("Golovi_domaci", golovi_domaci) :
                new ObjectParameter("Golovi_domaci", typeof(int));
    
            var golovi_gostiParameter = golovi_gosti.HasValue ?
                new ObjectParameter("Golovi_gosti", golovi_gosti) :
                new ObjectParameter("Golovi_gosti", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("insertIntoUtakmice", idDomaciParameter, idGostiParameter, golovi_domaciParameter, golovi_gostiParameter);
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual int updateToIgraci(string ime, Nullable<int> timId, Nullable<int> igracId)
        {
            var imeParameter = ime != null ?
                new ObjectParameter("Ime", ime) :
                new ObjectParameter("Ime", typeof(string));
    
            var timIdParameter = timId.HasValue ?
                new ObjectParameter("TimId", timId) :
                new ObjectParameter("TimId", typeof(int));
    
            var igracIdParameter = igracId.HasValue ?
                new ObjectParameter("IgracId", igracId) :
                new ObjectParameter("IgracId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("updateToIgraci", imeParameter, timIdParameter, igracIdParameter);
        }
    
        public virtual ObjectResult<updateToStatistika_Result> updateToStatistika(Nullable<int> igracId, Nullable<int> utakmicaId, Nullable<int> golovi)
        {
            var igracIdParameter = igracId.HasValue ?
                new ObjectParameter("IgracId", igracId) :
                new ObjectParameter("IgracId", typeof(int));
    
            var utakmicaIdParameter = utakmicaId.HasValue ?
                new ObjectParameter("UtakmicaId", utakmicaId) :
                new ObjectParameter("UtakmicaId", typeof(int));
    
            var goloviParameter = golovi.HasValue ?
                new ObjectParameter("Golovi", golovi) :
                new ObjectParameter("Golovi", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<updateToStatistika_Result>("updateToStatistika", igracIdParameter, utakmicaIdParameter, goloviParameter);
        }
    
        public virtual int updateToTimovi(string naziv, Nullable<int> broj, Nullable<int> timId)
        {
            var nazivParameter = naziv != null ?
                new ObjectParameter("Naziv", naziv) :
                new ObjectParameter("Naziv", typeof(string));
    
            var brojParameter = broj.HasValue ?
                new ObjectParameter("Broj", broj) :
                new ObjectParameter("Broj", typeof(int));
    
            var timIdParameter = timId.HasValue ?
                new ObjectParameter("TimId", timId) :
                new ObjectParameter("TimId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("updateToTimovi", nazivParameter, brojParameter, timIdParameter);
        }
    
        public virtual int updateToUtakmice(Nullable<int> idDomaci, Nullable<int> idGosti, Nullable<int> golovi_domaci, Nullable<int> golovi_gosti, Nullable<int> utakmicaId)
        {
            var idDomaciParameter = idDomaci.HasValue ?
                new ObjectParameter("IdDomaci", idDomaci) :
                new ObjectParameter("IdDomaci", typeof(int));
    
            var idGostiParameter = idGosti.HasValue ?
                new ObjectParameter("IdGosti", idGosti) :
                new ObjectParameter("IdGosti", typeof(int));
    
            var golovi_domaciParameter = golovi_domaci.HasValue ?
                new ObjectParameter("Golovi_domaci", golovi_domaci) :
                new ObjectParameter("Golovi_domaci", typeof(int));
    
            var golovi_gostiParameter = golovi_gosti.HasValue ?
                new ObjectParameter("Golovi_gosti", golovi_gosti) :
                new ObjectParameter("Golovi_gosti", typeof(int));
    
            var utakmicaIdParameter = utakmicaId.HasValue ?
                new ObjectParameter("UtakmicaId", utakmicaId) :
                new ObjectParameter("UtakmicaId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("updateToUtakmice", idDomaciParameter, idGostiParameter, golovi_domaciParameter, golovi_gostiParameter, utakmicaIdParameter);
        }
    }
}
